def save_order_to_file(all_orders):
    try:
        for customer_number, (order, total_cost) in enumerate(all_orders, start=1):
            filename = f"customer_order_{customer_number}.txt"
            with open(filename, 'w', encoding='utf-8') as file:
                file.write(f"==================== Customer {customer_number} Order ====================\n")
                for category, items in order.items():
                    if items:
                        file.write(f"\n--- {category.capitalize()} ---\n")
                        for item, quantity, price in items:
                            file.write(f"{item} x{quantity} = ₱{price * quantity}\n")
                file.write("------------------------------------------------------\n")
                file.write(f"Total Amount: ₱{total_cost}\n")
                file.write("=======================================================\n")
            print(f"Order saved in {filename}")
    except Exception as e:
        print(f"Error saving order: {e}")

def print_receipt(all_orders):
    customer_number = int(input("\nEnter the customer number to print the receipt: "))
    if 1 <= customer_number <= len(all_orders):
        order, total_cost = all_orders[customer_number - 1]
        print(f"\nCustomer {customer_number} Receipt:")
        for category, items in order.items():
            if items:
                print(f"\n--- {category.capitalize()} ---")
                for item, quantity, price in items:
                    print(f"{item} x{quantity} = ₱{price * quantity}")
        print("------------------------------------------------------")
        print(f"Total Amount: ₱{total_cost}")
        print("=======================================================")
    else:
        print(f"No orders found for Customer {customer_number}.")

def search_customer(all_orders, customer_number):
    if 1 <= customer_number <= len(all_orders):
        print(f"\nCustomer {customer_number}'s Order:")
        print_receipt(all_orders)
    else:
        print(f"No order found for Customer {customer_number}.")

def update_order(all_orders):
    customer_number = int(input("\nEnter the customer number whose order you'd like to update: "))
    if 1 <= customer_number <= len(all_orders):
        order, total_cost = all_orders[customer_number - 1]
        print(f"\nCustomer {customer_number}'s Current Order:")
        print_receipt([all_orders[customer_number - 1]])

        category = input("Enter the category to update (ulam_pinoy, desserts, drinks): ").lower()
        if category in order:
            print(f"\nItems in {category} category:")
            for i, (item, quantity, price) in enumerate(order[category]):
                print(f"{i + 1}. {item} x{quantity} = ₱{price * quantity}")
            
            item_index = int(input(f"Enter the number of the {category} item to update: ")) - 1
            if 0 <= item_index < len(order[category]):
                item_to_update = order[category][item_index][0]
                new_quantity = int(input(f"Enter the new quantity for {item_to_update}: "))
                order[category][item_index] = (item_to_update, new_quantity, order[category][item_index][2])

                # Recalculate total cost
                new_total_cost = sum(price * quantity for cat_items in order.values() for item, quantity, price in cat_items)
                all_orders[customer_number - 1] = (order, new_total_cost)
                print(f"Order updated. New total: ₱{new_total_cost}")
            else:
                print("Invalid item selection.")
        else:
            print(f"No items found in the {category} category.")
    else:
        print(f"Customer {customer_number} does not exist.")

def delete_item(all_orders):
    customer_number = int(input("\nEnter the customer number whose order you'd like to delete an item from: "))
    if 1 <= customer_number <= len(all_orders):
        order, total_cost = all_orders[customer_number - 1] 
        category = input("Enter the category to delete from (ulam_pinoy, desserts, drinks): ").lower()
        if category in order:
            print(f"\nItems in {category} category:")
            for i, (item, quantity, price) in enumerate(order[category]):
                print(f"{i + 1}. {item} x{quantity} = ₱{price * quantity}")
            item_index = int(input(f"Enter the number of the {category} item to delete: ")) - 1
            if 0 <= item_index < len(order[category]):
                item_to_delete = order[category][item_index][0]
                
                del order[category][item_index]
                print(f"{item_to_delete} has been removed from Customer {customer_number}'s {category} order.")
                
                # Recalculate total cost
                new_total_cost = sum(price * quantity for cat_items in order.values() for item, quantity, price in cat_items)
                all_orders[customer_number - 1] = (order, new_total_cost)  
            else:
                print("Invalid item selection.")
        else:
            print(f"No items found in the {category} category.")
    else:
        print(f"Customer {customer_number} does not exist.")

def take_order(menu, category_name):
    order = []
    total_cost = 0

    while True:
        # Display the menu each time before asking for input
        print(f"\n--- {category_name.capitalize()} ---")
        for dish, price in menu.items():
            print(f"{dish}: ₱{price}")
        
        # Prompt for order or cancel
        food_item = input(f"\nEnter the name of the {category_name} you'd like to order (or type 'done' to finish, 'cancel' to remove an item): ").title()

        if food_item.lower() == 'done':
            # End order entry
            break
        elif food_item.lower() == 'cancel':
            if order:
                print("\nYour current order:")
                for i, (item, quantity, price) in enumerate(order, start=1):
                    print(f"{i}. {item} x{quantity} = ₱{price * quantity}")
                try:
                    item_to_cancel = int(input(f"Enter the number of the item to cancel (1-{len(order)}): ")) - 1
                    if 0 <= item_to_cancel < len(order):
                        canceled_item = order[item_to_cancel]
                        order.pop(item_to_cancel)
                        total_cost -= canceled_item[1] * canceled_item[2]
                        print(f"{canceled_item[0]} has been removed from your order.")
                    else:
                        print("Invalid item number. Please try again.")
                except ValueError:
                    print("Please enter a valid number.")
            else:
                print("Your order is empty. Nothing to cancel.")
        elif food_item in menu:
            quantity = int(input(f"How many {food_item} would you like to order? "))
            total_cost += menu[food_item] * quantity
            order.append((food_item, quantity, menu[food_item]))
        else:
            print(f"Sorry, we don't have that {category_name} on the menu. Please choose again.")
    
    return order, total_cost

def add_order_to_customer(all_orders, customer_number, menu_dict):
    """Add more items to an existing customer's order."""
    if 1 <= customer_number <= len(all_orders):
        order, total_cost = all_orders[customer_number - 1]
        print(f"\nAdding more items to Customer {customer_number}'s existing order.")
        
        while True:
            category = input(f"Which category would you like to add more items to? (ulam_pinoy, desserts, drinks, or 'done' to finish): ").lower()
            if category == 'done':
                break
            if category in menu_dict:
                category_order, category_cost = take_order(menu_dict[category], category)
                order[category] += category_order
                total_cost += category_cost
            else:
                print("Invalid category. Please choose from 'ulam_pinoy', 'desserts', 'drinks'.")
        
        # Recalculate the total cost
        all_orders[customer_number - 1] = (order, total_cost)
        print(f"Customer {customer_number}'s order updated with new items. Total now: ₱{total_cost}")
    else:
        print(f"No customer found with number {customer_number}.")

def main():
    ulam_pinoy = {
        "Adobo": 150, "Lechon Kawali": 220, "Pancit Canton": 100, "Lumpiang Shanghai": 120,
        "Kare-Kare": 250, "Bicol Express": 190, "Laing": 140
    }

    desserts = {
        "Leche Flan": 60, "Bibingka": 70, "Turon": 50,
        "Halayang Ube": 90, "Pichi-Pichi": 60, "Cassava Cake": 60, 
        "Kalamay Gabi": 70, "Halo-Halo": 150
    }

    drinks = {
        "Calamansi Juice": 40, "Melon Juice": 50, "Buko Pandan": 50, "Buko Shake": 60, 
        "Mango Shake": 70
    }

    menu_dict = {
        'ulam_pinoy': ulam_pinoy,
        'desserts': desserts,
        'drinks': drinks
    }

    print("=============================================================")
    print("         Welcome to the Filipino Restaurant!                ")
    print("        Experience the best of Filipino cuisine!            ")
    print("=============================================================")

    all_orders = []
    customer_count = 1
    while True:
        print(f"\nCustomer {customer_count}:")
        ulam_order, ulam_total_cost = take_order(ulam_pinoy, "ulam pinoy")
        dessert_order, dessert_total_cost = take_order(desserts, "dessert")
        drink_order, drink_total_cost = take_order(drinks, "drink")

        order = {
            'ulam_pinoy': ulam_order,
            'desserts': dessert_order,
            'drinks': drink_order
        }
        total_cost = ulam_total_cost + dessert_total_cost + drink_total_cost

        all_orders.append((order, total_cost))
        save_order_to_file(all_orders)  

        
        while True:
            action = input("\n[S]earch, [D]elete an item, [P]rint a receipt, [U]pdate an order, [A]dd more items, [N]ext customer? ").lower()
            if action == 's':
                customer_number = int(input("Enter the customer number to search: "))
                search_customer(all_orders, customer_number)
            elif action == 'd':
                delete_item(all_orders)
            elif action == 'p':
                print_receipt(all_orders) 
            elif action == 'u':
                update_order(all_orders)  # Update order option
            elif action == 'a':
                customer_number = int(input("Enter the customer number to add more items: "))
                add_order_to_customer(all_orders, customer_number, menu_dict)
            elif action == 'n':
                customer_count += 1
                break
            else:
                print("Invalid option. Please choose again.")

if __name__ == "__main__":
    main()
